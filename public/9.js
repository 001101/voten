webpackJsonp([9],{

/***/ 272:
/***/ (function(module, exports, __webpack_require__) {

eval("var disposed = false\nvar Component = __webpack_require__(1)(\n  /* script */\n  __webpack_require__(770),\n  /* template */\n  __webpack_require__(772),\n  /* styles */\n  null,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\nComponent.options.__file = \"/Users/saleh/code/voten/resources/assets/js/components/NewSubmission.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key.substr(0, 2) !== \"__\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] NewSubmission.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-fb2b3460\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-fb2b3460\", Component.options)\n  }\n  module.hot.dispose(function (data) {\n    disposed = true\n  })\n})()}\n\nmodule.exports = Component.exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjcyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL05ld1N1Ym1pc3Npb24udnVlPzg3YTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRpc3Bvc2VkID0gZmFsc2VcbnZhciBDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKShcbiAgLyogc2NyaXB0ICovXG4gIHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlcj97XFxcImNhY2hlRGlyZWN0b3J5XFxcIjp0cnVlLFxcXCJwcmVzZXRzXFxcIjpbW1xcXCJlbnZcXFwiLHtcXFwibW9kdWxlc1xcXCI6ZmFsc2UsXFxcInRhcmdldHNcXFwiOntcXFwiYnJvd3NlcnNcXFwiOltcXFwiPiAyJVxcXCJdLFxcXCJ1Z2xpZnlcXFwiOnRydWV9fV1dfSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL05ld1N1Ym1pc3Npb24udnVlXCIpLFxuICAvKiB0ZW1wbGF0ZSAqL1xuICByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi1mYjJiMzQ2MFxcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2V9IS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9OZXdTdWJtaXNzaW9uLnZ1ZVwiKSxcbiAgLyogc3R5bGVzICovXG4gIG51bGwsXG4gIC8qIHNjb3BlSWQgKi9cbiAgbnVsbCxcbiAgLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG4gIG51bGxcbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiL1VzZXJzL3NhbGVoL2NvZGUvdm90ZW4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9jb21wb25lbnRzL05ld1N1Ym1pc3Npb24udnVlXCJcbmlmIChDb21wb25lbnQuZXNNb2R1bGUgJiYgT2JqZWN0LmtleXMoQ29tcG9uZW50LmVzTW9kdWxlKS5zb21lKGZ1bmN0aW9uIChrZXkpIHtyZXR1cm4ga2V5ICE9PSBcImRlZmF1bHRcIiAmJiBrZXkuc3Vic3RyKDAsIDIpICE9PSBcIl9fXCJ9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbmlmIChDb21wb25lbnQub3B0aW9ucy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBOZXdTdWJtaXNzaW9uLnZ1ZTogZnVuY3Rpb25hbCBjb21wb25lbnRzIGFyZSBub3Qgc3VwcG9ydGVkIHdpdGggdGVtcGxhdGVzLCB0aGV5IHNob3VsZCB1c2UgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi1mYjJiMzQ2MFwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LWZiMmIzNDYwXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvTmV3U3VibWlzc2lvbi52dWVcbi8vIG1vZHVsZSBpZCA9IDI3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDkiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///272\n");

/***/ }),

/***/ 770:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* WEBPACK VAR INJECTION */(function(_) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Markdown_vue__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Markdown_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__components_Markdown_vue__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mixins_Helpers__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__mixins_SubmitFormUpload__ = __webpack_require__(771);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    props: ['visible'],\n    mixins: [__WEBPACK_IMPORTED_MODULE_1__mixins_Helpers__[\"a\" /* default */], __WEBPACK_IMPORTED_MODULE_2__mixins_SubmitFormUpload__[\"a\" /* default */]],\n    components: { Markdown: __WEBPACK_IMPORTED_MODULE_0__components_Markdown_vue___default.a },\n\n    data: function data() {\n        return {\n            errors: [],\n            customError: '',\n\n            loading: false,\n            loadingChannels: false,\n            selectedCat: null,\n            suggestedCats: [],\n            submissionType: 'link',\n            title: '',\n            sfw: true,\n\n            // Link\n            submitURL: '',\n            loadingTitle: false,\n\n            // Text\n            preview: false,\n            text: '',\n\n            // Photo\n            photos: [],\n            photosNumberLimit: 20,\n            photosSizeLimit: 10,\n            previewPhotoImage: '',\n            previewPhotoFileName: '',\n            previewPhotoModal: false,\n\n            // GIF\n            gifTempArray: [],\n            gif_id: null,\n            gifNumberLimit: 1,\n            gifSizeLimit: 50,\n            previewGifImage: '',\n            previewGifFileName: '',\n            previewGifModal: false\n        };\n    },\n\n\n    computed: {\n        goodToGo: function goodToGo() {\n            if (this.submissionType == 'link') {\n                return this.title.trim().length > 0 && this.selectedCat && this.submitURL && !this.loading;\n            }\n\n            if (this.submissionType == 'img') {\n                return this.title.trim().length > 0 && this.selectedCat && this.photos.length && !this.loading;\n            }\n\n            return this.title.trim().length > 0 && this.selectedCat && !this.loading;\n        }\n    },\n\n    created: function created() {\n        this.setDefaultChannels();\n        this.submitApi();\n    },\n\n\n    watch: {\n        visible: function visible() {\n            if (this.visible) {\n                this.setDefaultChannels();\n                this.submitApi();\n                window.location.hash = 'newSubmission';\n            } else {\n                if (window.location.hash == '#newSubmission') {\n                    history.go(-1);\n                }\n            }\n        }\n    },\n\n    methods: {\n        /**\n             * Closes the modal.\n             *\n             * @return void\n             */\n        close: function close() {\n            this.$emit('update:visible', false);\n        },\n\n\n        /**\n             * Used for setting the values using API. This will get extended in the future to support\n             * voten sharing buttons! But for now we are just going to use it for setting the default\n             * channel so when clicked on submit in the channels, users won't have to set channel.\n             *\n             * @return\n             */\n        submitApi: function submitApi() {\n            if (this.$route.params.name) {\n                this.selectedCat = this.$route.params.name;\n            } else {\n                this.selectedCat = null;\n            }\n\n            this.sfw = !Store.page.channel.temp.nsfw;\n        },\n\n\n        /**\n             * Sets the default value for suggestCats (uses user's already subscriber channels)\n             *\n             * @return void\n             */\n        setDefaultChannels: function setDefaultChannels() {\n            var array = [];\n\n            Store.state.subscribedChannels.forEach(function (element, index) {\n                array.push(element.name);\n            });\n\n            this.suggestedCats = array;\n        },\n\n\n        /**\n             * Submits the form.\n             *\n             * @return void\n             */\n        submit: function submit() {\n            var _this = this;\n\n            this.loading = true;\n\n            axios.post('/submission', {\n                title: this.title,\n                url: this.submitURL,\n                text: this.text,\n                name: this.selectedCat,\n                type: this.submissionType,\n                photos: _.map(this.photos, 'id'),\n                gif_id: this.gif_id,\n                nsfw: !this.sfw\n            }).then(function (response) {\n                // success\n                _this.errors = [];\n\n                Store.state.submissions.upVotes.push(response.data.id);\n\n                _this.$router.push('/c/' + _this.selectedCat + '/' + response.data.slug);\n\n                _this.loading = false;\n\n                _this.close();\n                _this.reset();\n            }).catch(function (error) {\n                // error\n                if (error.response.status == 500) {\n                    _this.customError = error.response.data;\n                    _this.errors = [];\n                    _this.loading = false;\n                    return;\n                }\n\n                _this.errors = error.response.data.errors;\n                _this.loading = false;\n            });\n        },\n\n\n        /**\n             * Fetches the title from the external URL (through Voten's proxy server which we contact via API)\n             *\n             * @param string typed\n             * @return void\n             */\n        getTitle: function getTitle(typed) {\n            var _this2 = this;\n\n            if (!typed.trim()) return;\n\n            this.loadingTitle = true;\n\n            axios.get('/fetch-url-title', {\n                params: {\n                    url: typed\n                }\n            }).then(function (response) {\n                _this2.title = response.data;\n                _this2.loadingTitle = false;\n                _this2.errors.url = [];\n            }).catch(function (error) {\n                if (error.response.status == 500) {\n                    _this2.customError = error.response.data;\n                    _this2.errors = [];\n                    _this2.loadingTitle = false;\n                    return;\n                }\n\n                _this2.errors = error.response.data.errors;\n                _this2.loadingTitle = false;\n            });\n        },\n\n\n        /**\n             * Searches through channels.\n             *\n             * @param string typed\n             * @return void\n             */\n        getSuggestedChannels: _.debounce(function (typed) {\n            var _this3 = this;\n\n            if (!typed) return;\n\n            this.loadingChannels = true;\n\n            axios.get('/get-channels', {\n                params: {\n                    name: typed\n                }\n            }).then(function (response) {\n                _this3.suggestedCats = response.data;\n                _this3.loadingChannels = false;\n            }).catch(function () {\n                _this3.loadingChannels = false;\n            });\n        }, 600),\n\n        /**\n             * Switch the type.\n             *\n             * @param string newType\n             * @return void\n             */\n        changeSubmissionType: function changeSubmissionType(newType) {\n            this.submissionType = newType;\n        },\n        reset: function reset() {\n            this.errors = [];\n            this.customError = '';\n\n            this.loading = false;\n            this.loadingChannels = false;\n            this.selectedCat = null;\n            this.suggestedCats = [];\n            this.submissionType = 'text';\n            this.title = '';\n            this.sfw = true;\n\n            // Link\n            this.submitURL = '';\n            this.loadingTitle = false;\n\n            // Text\n            this.preview = false;\n            this.text = '';\n\n            // Photo\n            this.photos = [];\n            this.previewPhotoImage = '';\n            this.previewPhotoFileName = '';\n            this.previewPhotoModal = false;\n\n            // GIF\n            this.gifTempArray = [];\n            this.gif_id = null;\n            this.previewGifImage = '';\n            this.previewGifFileName = '';\n            this.previewGifModal = fals;\n        }\n    }\n});\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(5)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///770\n");

/***/ }),

/***/ 771:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony default export */ __webpack_exports__[\"a\"] = ({\n    methods: {\n        ////////////////////////////////////////////\n        /////////// Photo Upload Methods  //////////\n        ////////////////////////////////////////////\n        beforePhotoUploadCheckings: function beforePhotoUploadCheckings(file) {\n            var isInCorrectFormat = file.type === 'image/jpeg' || file.type === 'image/jpg' || file.type === 'image/png';\n            var doesNotExceedFileSize = file.size / 1024 / 1024 < this.photosSizeLimit;\n\n            if (!isInCorrectFormat) {\n                this.$message.error('Only files with jpg/png formats are allowed! ');\n            }\n\n            if (!doesNotExceedFileSize) {\n                this.$message.error('Uplaoded photo size can not exceed ' + this.photosSizeLimit + 'mb!');\n            }\n\n            return isInCorrectFormat && doesNotExceedFileSize;\n        },\n        exceededPhotoFileCount: function exceededPhotoFileCount(files, fileList) {\n            this.$message.error('The limit is ' + this.photosNumberLimit + ', you selected ' + files.length + ' files this time. You may add up to ' + (this.photosNumberLimit - fileList.length) + ' more files for this post. ');\n        },\n        failedPhotoUpload: function failedPhotoUpload(err, file, fileList) {\n            this.$message.error(err.message);\n            this.photos = fileList;\n        },\n        removePhoto: function removePhoto(file, fileList) {\n            this.photos = fileList;\n        },\n        photoPreview: function photoPreview(file) {\n            this.previewPhotoImage = file.url;\n            this.previewPhotoFileName = file.name;\n            this.previewPhotoModal = true;\n        },\n        successfulPhotoUpload: function successfulPhotoUpload(response, file, fileList) {\n            file.id = response;\n            this.photos.push(file);\n        },\n\n\n        /////////////////////////////////////////////\n        /////////// GIF Upload Methods  /////////////\n        /////////////////////////////////////////////\n        beforeGifUploadCheckings: function beforeGifUploadCheckings(file) {\n            var isInCorrectFormat = file.type === 'image/gif';\n            var doesNotExceedFileSize = file.size / 1024 / 1024 < this.gifSizeLimit;\n\n            if (!isInCorrectFormat) {\n                this.$message.error('Only animated GIF files with .gif format are allowed! ');\n            }\n\n            if (!doesNotExceedFileSize) {\n                this.$message.error('Uplaoded GIF size can not exceed ' + this.gifSizeLimit + 'mb!');\n            }\n\n            return isInCorrectFormat && doesNotExceedFileSize;\n        },\n        exceededGifFileCount: function exceededGifFileCount(files, fileList) {\n            this.$message.error('You can only Upload one GIF file per submission.');\n        },\n        failedGifUpload: function failedGifUpload(err, file, fileList) {\n            this.$message.error(err.message);\n            this.gif_id = null;\n        },\n        removeGif: function removeGif(file, fileList) {\n            this.gif_id = null;\n        },\n        gifPreview: function gifPreview(file) {\n            this.previewGifImage = file.url;\n            this.previewGifFileName = file.name;\n            this.previewGifModal = true;\n        },\n        successfulGifUpload: function successfulGifUpload(response, file, fileList) {\n            this.gif_id = response;\n        }\n    }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzcxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3Jlc291cmNlcy9hc3NldHMvanMvbWl4aW5zL1N1Ym1pdEZvcm1VcGxvYWQuanM/M2JhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gICAgbWV0aG9kczoge1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLy8vLy8vLy8vLyBQaG90byBVcGxvYWQgTWV0aG9kcyAgLy8vLy8vLy8vL1xuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICBiZWZvcmVQaG90b1VwbG9hZENoZWNraW5ncyhmaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBpc0luQ29ycmVjdEZvcm1hdCA9IChmaWxlLnR5cGUgPT09ICdpbWFnZS9qcGVnJyB8fCBmaWxlLnR5cGUgPT09ICdpbWFnZS9qcGcnIHx8IGZpbGUudHlwZSA9PT0gJ2ltYWdlL3BuZycpO1xuICAgICAgICAgICAgY29uc3QgZG9lc05vdEV4Y2VlZEZpbGVTaXplID0gZmlsZS5zaXplIC8gMTAyNCAvIDEwMjQgPCB0aGlzLnBob3Rvc1NpemVMaW1pdDtcblxuICAgICAgICAgICAgaWYgKCFpc0luQ29ycmVjdEZvcm1hdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ09ubHkgZmlsZXMgd2l0aCBqcGcvcG5nIGZvcm1hdHMgYXJlIGFsbG93ZWQhICcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWRvZXNOb3RFeGNlZWRGaWxlU2l6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoYFVwbGFvZGVkIHBob3RvIHNpemUgY2FuIG5vdCBleGNlZWQgJHt0aGlzLnBob3Rvc1NpemVMaW1pdH1tYiFgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGlzSW5Db3JyZWN0Rm9ybWF0ICYmIGRvZXNOb3RFeGNlZWRGaWxlU2l6ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZXhjZWVkZWRQaG90b0ZpbGVDb3VudChmaWxlcywgZmlsZUxpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoYFRoZSBsaW1pdCBpcyAke3RoaXMucGhvdG9zTnVtYmVyTGltaXR9LCB5b3Ugc2VsZWN0ZWQgJHtmaWxlcy5sZW5ndGh9IGZpbGVzIHRoaXMgdGltZS4gWW91IG1heSBhZGQgdXAgdG8gJHt0aGlzLnBob3Rvc051bWJlckxpbWl0IC0gZmlsZUxpc3QubGVuZ3RofSBtb3JlIGZpbGVzIGZvciB0aGlzIHBvc3QuIGApO1xuICAgICAgICB9LFxuICAgICAgICBmYWlsZWRQaG90b1VwbG9hZChlcnIsIGZpbGUsIGZpbGVMaXN0KSB7XG4gICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgIHRoaXMucGhvdG9zID0gZmlsZUxpc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZVBob3RvKGZpbGUsIGZpbGVMaXN0KSB7XG4gICAgICAgICAgICB0aGlzLnBob3RvcyA9IGZpbGVMaXN0O1xuICAgICAgICB9LFxuICAgICAgICBwaG90b1ByZXZpZXcoZmlsZSkge1xuICAgICAgICAgICAgdGhpcy5wcmV2aWV3UGhvdG9JbWFnZSA9IGZpbGUudXJsO1xuICAgICAgICAgICAgdGhpcy5wcmV2aWV3UGhvdG9GaWxlTmFtZSA9IGZpbGUubmFtZTtcbiAgICAgICAgICAgIHRoaXMucHJldmlld1Bob3RvTW9kYWwgPSB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBzdWNjZXNzZnVsUGhvdG9VcGxvYWQocmVzcG9uc2UsIGZpbGUsIGZpbGVMaXN0KSB7XG4gICAgICAgICAgICBmaWxlLmlkID0gcmVzcG9uc2U7XG4gICAgICAgICAgICB0aGlzLnBob3Rvcy5wdXNoKGZpbGUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAvLy8vLy8vLy8vLyBHSUYgVXBsb2FkIE1ldGhvZHMgIC8vLy8vLy8vLy8vLy9cbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgIGJlZm9yZUdpZlVwbG9hZENoZWNraW5ncyhmaWxlKSB7XG4gICAgICAgICAgICBjb25zdCBpc0luQ29ycmVjdEZvcm1hdCA9IChmaWxlLnR5cGUgPT09ICdpbWFnZS9naWYnKTtcbiAgICAgICAgICAgIGNvbnN0IGRvZXNOb3RFeGNlZWRGaWxlU2l6ZSA9IGZpbGUuc2l6ZSAvIDEwMjQgLyAxMDI0IDwgdGhpcy5naWZTaXplTGltaXQ7XG5cbiAgICAgICAgICAgIGlmICghaXNJbkNvcnJlY3RGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCdPbmx5IGFuaW1hdGVkIEdJRiBmaWxlcyB3aXRoIC5naWYgZm9ybWF0IGFyZSBhbGxvd2VkISAnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFkb2VzTm90RXhjZWVkRmlsZVNpemUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKGBVcGxhb2RlZCBHSUYgc2l6ZSBjYW4gbm90IGV4Y2VlZCAke3RoaXMuZ2lmU2l6ZUxpbWl0fW1iIWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gaXNJbkNvcnJlY3RGb3JtYXQgJiYgZG9lc05vdEV4Y2VlZEZpbGVTaXplO1xuICAgICAgICB9LFxuICAgICAgICBleGNlZWRlZEdpZkZpbGVDb3VudChmaWxlcywgZmlsZUxpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoYFlvdSBjYW4gb25seSBVcGxvYWQgb25lIEdJRiBmaWxlIHBlciBzdWJtaXNzaW9uLmApO1xuICAgICAgICB9LFxuICAgICAgICBmYWlsZWRHaWZVcGxvYWQoZXJyLCBmaWxlLCBmaWxlTGlzdCkge1xuICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcihlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICB0aGlzLmdpZl9pZCA9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZUdpZihmaWxlLCBmaWxlTGlzdCkge1xuICAgICAgICAgICAgdGhpcy5naWZfaWQgPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBnaWZQcmV2aWV3KGZpbGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJldmlld0dpZkltYWdlID0gZmlsZS51cmw7XG4gICAgICAgICAgICB0aGlzLnByZXZpZXdHaWZGaWxlTmFtZSA9IGZpbGUubmFtZTtcbiAgICAgICAgICAgIHRoaXMucHJldmlld0dpZk1vZGFsID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc3VjY2Vzc2Z1bEdpZlVwbG9hZChyZXNwb25zZSwgZmlsZSwgZmlsZUxpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuZ2lmX2lkID0gcmVzcG9uc2U7XG4gICAgICAgIH0sXG4gICAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyByZXNvdXJjZXMvYXNzZXRzL2pzL21peGlucy9TdWJtaXRGb3JtVXBsb2FkLmpzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF4RUE7QUFEQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///771\n");

/***/ }),

/***/ 772:
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('el-dialog', {\n    staticClass: \"user-select submit-form\",\n    attrs: {\n      \"title\": \"New Submission\",\n      \"visible\": _vm.visible,\n      \"width\": _vm.isMobile ? '99%' : '600px',\n      \"append-to-body\": \"\"\n    },\n    on: {\n      \"close\": _vm.close\n    }\n  }, [(_vm.customError) ? _c('el-alert', {\n    attrs: {\n      \"title\": _vm.customError,\n      \"type\": \"error\"\n    }\n  }) : _vm._e(), _vm._v(\" \"), _c('el-form', {\n    attrs: {\n      \"label-position\": \"top\",\n      \"label-width\": \"10px\"\n    }\n  }, [_c('el-form-item', {\n    attrs: {\n      \"label\": \"Title:\"\n    }\n  }, [_c('el-input', {\n    staticClass: \"input-with-select\",\n    attrs: {\n      \"placeholder\": \"Title ...\",\n      \"name\": \"title\",\n      \"maxlength\": 150,\n      \"minlength\": 7\n    },\n    model: {\n      value: (_vm.title),\n      callback: function($$v) {\n        _vm.title = $$v\n      },\n      expression: \"title\"\n    }\n  }, [(_vm.submitURL && _vm.submissionType === 'link') ? _c('el-button', {\n    attrs: {\n      \"slot\": \"append\",\n      \"type\": \"primary\",\n      \"loading\": _vm.loadingTitle\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.getTitle(_vm.submitURL)\n      }\n    },\n    slot: \"append\"\n  }, [_vm._v(\"\\n\\t\\t\\t\\t\\tSuggest\\n\\t\\t\\t\\t\")]) : _vm._e()], 1), _vm._v(\" \"), _vm._l((_vm.errors.title), function(e) {\n    return _c('el-alert', {\n      key: e,\n      attrs: {\n        \"title\": e,\n        \"type\": \"error\"\n      }\n    })\n  })], 2), _vm._v(\" \"), (_vm.submissionType === 'text') ? _c('el-form-item', {\n    attrs: {\n      \"label\": \"Text(optional):\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"type\": \"textarea\",\n      \"placeholder\": \"Text(optional)...\",\n      \"name\": \"text\",\n      \"resize\": \"none\",\n      \"maxlength\": 15000,\n      \"autosize\": {\n        minRows: 4,\n        maxRows: 10\n      }\n    },\n    model: {\n      value: (_vm.text),\n      callback: function($$v) {\n        _vm.text = $$v\n      },\n      expression: \"text\"\n    }\n  }), _vm._v(\" \"), _vm._l((_vm.errors.text), function(e) {\n    return _c('el-alert', {\n      key: e,\n      attrs: {\n        \"title\": e,\n        \"type\": \"error\"\n      }\n    })\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"flex-space\"\n  }, [_c('el-button', {\n    attrs: {\n      \"type\": \"text\",\n      \"size\": \"mini\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.$eventHub.$emit('markdown-guide')\n      }\n    }\n  }, [_vm._v(\"\\n\\t\\t\\t\\t\\tFormatting Guide\\n\\t\\t\\t\\t\")]), _vm._v(\" \"), _c('el-button', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.text),\n      expression: \"text\"\n    }],\n    attrs: {\n      \"size\": \"mini\",\n      \"type\": \"text\",\n      \"icon\": _vm.preview ? 'el-icon-close' : 'el-icon-view'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.preview = !_vm.preview\n      }\n    }\n  }, [_vm._v(\"\\n\\t\\t\\t\\t\\tPreview\\n\\t\\t\\t\\t\")])], 1), _vm._v(\" \"), (_vm.preview && _vm.text) ? _c('div', {\n    staticClass: \"preview margin-top-1 enable-user-select\"\n  }, [_c('markdown', {\n    attrs: {\n      \"text\": _vm.text.trim()\n    }\n  })], 1) : _vm._e()], 2) : _vm._e(), _vm._v(\" \"), (_vm.submissionType === 'link') ? _c('el-form-item', {\n    attrs: {\n      \"label\": \"URL:\"\n    }\n  }, [_c('el-input', {\n    attrs: {\n      \"placeholder\": \"URL ...\",\n      \"name\": \"url\"\n    },\n    model: {\n      value: (_vm.submitURL),\n      callback: function($$v) {\n        _vm.submitURL = $$v\n      },\n      expression: \"submitURL\"\n    }\n  }), _vm._v(\" \"), _vm._l((_vm.errors.url), function(e) {\n    return _c('el-alert', {\n      key: e,\n      attrs: {\n        \"title\": e,\n        \"type\": \"error\"\n      }\n    })\n  })], 2) : _vm._e(), _vm._v(\" \"), (_vm.submissionType === 'gif') ? _c('el-form-item', {\n    attrs: {\n      \"label\": \"GIF file:\"\n    }\n  }, [_c('el-upload', {\n    staticClass: \"upload-demo\",\n    attrs: {\n      \"drag\": \"\",\n      \"limit\": 1,\n      \"action\": \"/gif\",\n      \"file-list\": _vm.gifTempArray,\n      \"on-preview\": _vm.gifPreview,\n      \"on-remove\": _vm.removeGif,\n      \"on-success\": _vm.successfulGifUpload,\n      \"on-exceed\": _vm.exceededGifFileCount,\n      \"on-error\": _vm.failedGifUpload,\n      \"before-upload\": _vm.beforeGifUploadCheckings,\n      \"with-credentials\": \"\",\n      \"accept\": \".gif\",\n      \"headers\": {\n        'X-CSRF-TOKEN': _vm.csrf\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"el-icon-upload\"\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"el-upload__text\"\n  }, [_vm._v(\"Drop your GIF here or\\n\\t\\t\\t\\t\\t\"), _c('em', [_vm._v(\"click to upload\")])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"el-upload__tip\",\n    attrs: {\n      \"slot\": \"tip\"\n    },\n    slot: \"tip\"\n  }, [_vm._v(\"\\n\\t\\t\\t\\t\\tOnly animated GIFs with a valid .gif format with a size less than \" + _vm._s(_vm.gifSizeLimit) + \"mb are supported.\\n\\t\\t\\t\\t\")])]), _vm._v(\" \"), _c('el-dialog', {\n    attrs: {\n      \"visible\": _vm.previewGifModal,\n      \"title\": _vm.previewGifFileName,\n      \"append-to-body\": \"\"\n    },\n    on: {\n      \"update:visible\": function($event) {\n        _vm.previewGifModal = $event\n      }\n    }\n  }, [_c('img', {\n    attrs: {\n      \"width\": \"100%\",\n      \"src\": _vm.previewGifImage,\n      \"alt\": \"preview\"\n    }\n  })])], 1) : _vm._e(), _vm._v(\" \"), (_vm.submissionType === 'img') ? _c('el-form-item', {\n    attrs: {\n      \"label\": \"Photo(s):\"\n    }\n  }, [_c('el-upload', {\n    staticClass: \"upload-demo\",\n    attrs: {\n      \"drag\": \"\",\n      \"limit\": 20,\n      \"action\": \"/photo\",\n      \"file-list\": _vm.photos,\n      \"on-preview\": _vm.photoPreview,\n      \"on-remove\": _vm.removePhoto,\n      \"on-success\": _vm.successfulPhotoUpload,\n      \"on-exceed\": _vm.exceededPhotoFileCount,\n      \"on-error\": _vm.failedPhotoUpload,\n      \"before-upload\": _vm.beforePhotoUploadCheckings,\n      \"with-credentials\": \"\",\n      \"accept\": \" .jpg, .jpeg, .png\",\n      \"headers\": {\n        'X-CSRF-TOKEN': _vm.csrf\n      }\n    }\n  }, [_c('i', {\n    staticClass: \"el-icon-upload\"\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"el-upload__text\"\n  }, [_vm._v(\"Drop photo here or\\n\\t\\t\\t\\t\\t\"), _c('em', [_vm._v(\"click to upload\")])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"el-upload__tip\",\n    attrs: {\n      \"slot\": \"tip\"\n    },\n    slot: \"tip\"\n  }, [_vm._v(\"Up to \" + _vm._s(_vm.photosNumberLimit) + \" jpg/png files with a size less than \" + _vm._s(_vm.photosSizeLimit) + \"mb\\n\\t\\t\\t\\t\")])]), _vm._v(\" \"), _c('el-dialog', {\n    attrs: {\n      \"visible\": _vm.previewPhotoModal,\n      \"title\": _vm.previewPhotoFileName,\n      \"append-to-body\": \"\"\n    },\n    on: {\n      \"update:visible\": function($event) {\n        _vm.previewPhotoModal = $event\n      }\n    }\n  }, [_c('img', {\n    attrs: {\n      \"width\": \"100%\",\n      \"src\": _vm.previewPhotoImage,\n      \"alt\": \"preview\"\n    }\n  })])], 1) : _vm._e(), _vm._v(\" \"), _c('el-form-item', {\n    attrs: {\n      \"label\": \"Channel:\"\n    }\n  }, [_c('el-select', {\n    attrs: {\n      \"filterable\": \"\",\n      \"remote\": \"\",\n      \"placeholder\": \"#channel...\",\n      \"remote-method\": _vm.getSuggestedChannels,\n      \"loading-text\": \"Loading...\",\n      \"loading\": _vm.loadingChannels\n    },\n    model: {\n      value: (_vm.selectedCat),\n      callback: function($$v) {\n        _vm.selectedCat = $$v\n      },\n      expression: \"selectedCat\"\n    }\n  }, _vm._l((_vm.suggestedCats), function(item) {\n    return _c('el-option', {\n      key: item,\n      attrs: {\n        \"label\": item,\n        \"value\": item\n      }\n    })\n  })), _vm._v(\" \"), _vm._l((_vm.errors.name), function(e) {\n    return _c('el-alert', {\n      key: e,\n      attrs: {\n        \"title\": e,\n        \"type\": \"error\"\n      }\n    })\n  })], 2), _vm._v(\" \"), _c('el-form-item', [_c('el-checkbox', {\n    model: {\n      value: (_vm.sfw),\n      callback: function($$v) {\n        _vm.sfw = $$v\n      },\n      expression: \"sfw\"\n    }\n  }, [_vm._v(\"\\n\\t\\t\\t\\tSafe for work\\n\\t\\t\\t\")])], 1), _vm._v(\" \"), _c('hr', {\n    staticClass: \"dashed-hr\"\n  }), _vm._v(\" \"), _c('div', {\n    staticClass: \"flex-space\"\n  }, [_c('div', {\n    staticClass: \"submit-type\"\n  }, [_c('el-tooltip', {\n    attrs: {\n      \"content\": \"Photo(s)\",\n      \"placement\": \"top\",\n      \"transition\": \"false\",\n      \"open-delay\": 500\n    }\n  }, [_c('i', {\n    staticClass: \"v-icon v-photo\",\n    class: {\n      'go-primary': _vm.submissionType == 'img'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.changeSubmissionType('img')\n      }\n    }\n  })]), _vm._v(\" \"), _c('el-tooltip', {\n    attrs: {\n      \"content\": \"Link\",\n      \"placement\": \"top\",\n      \"transition\": \"false\",\n      \"open-delay\": 500\n    }\n  }, [_c('i', {\n    staticClass: \"v-icon v-link\",\n    class: {\n      'go-primary': _vm.submissionType == 'link'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.changeSubmissionType('link')\n      }\n    }\n  })]), _vm._v(\" \"), _c('el-tooltip', {\n    attrs: {\n      \"content\": \"Text\",\n      \"placement\": \"top\",\n      \"transition\": \"false\",\n      \"open-delay\": 500\n    }\n  }, [_c('i', {\n    staticClass: \"v-icon v-text\",\n    class: {\n      'go-primary': _vm.submissionType == 'text'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.changeSubmissionType('text')\n      }\n    }\n  })]), _vm._v(\" \"), _c('el-tooltip', {\n    attrs: {\n      \"content\": \"Animated GIF\",\n      \"placement\": \"top\",\n      \"transition\": \"false\",\n      \"open-delay\": 500\n    }\n  }, [_c('i', {\n    staticClass: \"v-icon v-gif\",\n    class: {\n      'go-primary': _vm.submissionType == 'gif'\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.changeSubmissionType('gif')\n      }\n    }\n  })])], 1), _vm._v(\" \"), _c('el-button', {\n    attrs: {\n      \"type\": \"success\",\n      \"size\": \"mini\",\n      \"disabled\": !_vm.goodToGo,\n      \"loading\": _vm.loading\n    },\n    on: {\n      \"click\": _vm.submit\n    }\n  }, [_vm._v(\"\\n\\t\\t\\t\\tSubmit\\n\\t\\t\\t\")])], 1)], 1)], 1)\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-fb2b3460\", module.exports)\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///772\n");

/***/ })

});